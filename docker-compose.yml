version: "3"

volumes: # 自定义数据卷
  db_vol: #定义数据卷同步存放容器内mysql数据
  redis_vol: #定义数据卷同步存放redis数据
  redis_sentinel_vol:
  media_vol: #定义数据卷同步存放web项目用户上传到media文件夹的数据
  static_vol: #定义数据卷同步存放web项目static文件夹的数据

networks: # 自定义网络(默认桥接), 不使用links通信
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge
  redis_network:
    driver: bridge

services:
  redis-master:
    image: redis:latest
    command: redis-server /etc/redis/redis-master.conf # 容器启动后启动redis服务器
    networks:
      - redis_network
    volumes:
      - redis_vol:/data  # 通过挂载给redis数据备份
      - ./compose/redis/redis-master.conf:/etc/redis/redis-master.conf # 挂载redis配置文件
    expose:
      - "6379"
    restart: always  # always表容器运行发生错误时一直重启

  redis-slave:
    image: redis:latest
    command: redis-server /etc/redis/redis-slave.conf
    networks:
      - redis_network
    volumes:
      - redis_vol:/data
      - ./compose/redis/redis-slave.conf:/etc/redis/redis-slave.conf
    expose:
      - "6379"
    restart: always

  redis-sentinel:
    image: redis:latest
    command: redis-sentinel /etc/redis/redis-sentinel.conf
    networks:
      - redis_network
    volumes:
      - redis_sentinel_vol:/data
      - ./compose/redis/redis-sentinel.conf:/etc/redis/redis-sentinel.conf
    expose:
      - "26379"
    restart: always

  db:
    image: mysql
    env_file:
      - .env # 使用了环境变量文件
    networks:
      - db_network
    volumes:
      - db_vol:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./compose/mysql/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件
      - ./compose/mysql/init:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    expose:
      - "3306" # 与配置文件保持一致
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
  web1:
    build: .
    expose:
      - "8000"
    volumes:
      - .:/var/www/html/myproject # 挂载项目代码
      - ./static:/app/static # 挂载静态文件
      - ./media:/app/media # 挂载用户上传媒体文件
      - static_vol:/var/www/html/myproject/static # 以数据卷挂载容器内static文件
      - media_vol:/var/www/html/myproject/media # 以数据卷挂载容器内用户上传媒体文件
      - ./compose/uwsgi:/tmp # 挂载uwsgi日志
    networks:
      - nginx_network
      - db_network
      - redis_network
    depends_on:
      - db
      - redis-master
    restart: always
    tty: true
    stdin_open: true
  web2:
    build: .
    expose:
      - "8000"
    volumes:
      - .:/var/www/html/myproject # 挂载项目代码
      - ./static:/app/static # 挂载静态文件
      - ./media:/app/media # 挂载用户上传媒体文件
      - static_vol:/var/www/html/myproject/static # 以数据卷挂载容器内static文件
      - media_vol:/var/www/html/myproject/media # 以数据卷挂载容器内用户上传媒体文件
      - ./compose/uwsgi:/tmp # 挂载uwsgi日志
    networks:
      - nginx_network
      - db_network
      - redis_network
    depends_on:
      - db
      - redis-master
    restart: always
    tty: true
    stdin_open: true
  web3:
    build: .
    expose:
      - "8000"
    volumes:
      - .:/var/www/html/myproject # 挂载项目代码
      - ./static:/app/static # 挂载静态文件
      - ./media:/app/media # 挂载用户上传媒体文件
      - static_vol:/var/www/html/myproject/static # 以数据卷挂载容器内static文件
      - media_vol:/var/www/html/myproject/media # 以数据卷挂载容器内用户上传媒体文件
      - ./compose/uwsgi:/tmp # 挂载uwsgi日志
    networks:
      - nginx_network
      - db_network
      - redis_network
    depends_on:
      - db
      - redis-master
    restart: always
    tty: true
    stdin_open: true

  nginx:
    build: ./compose/nginx
    ports:
      - "8088:8088"
    expose:
      - "8088"
    volumes:
      - ./compose/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf # 挂载nginx配置文件
      - ./compose/nginx/ssl:/usr/share/nginx/ssl # 挂载ssl证书目录
      - ./compose/nginx/log:/var/log/nginx # 挂载日志
      - ./static:/usr/share/nginx/html/static # 挂载静态文件
      - ./media:/usr/share/nginx/html/media # 挂载用户上传媒体文件
    networks:
      - nginx_network
    depends_on:
      - web1
      - web2
      - web3
    restart: always